from os import link
from pickle import NONE
from tkinter.tix import TEXT
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from aiohttp import Payload
import keyboards as nav

from keyboards import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
import logging
import sqlite3
import asyncio # –∞—Å–∏–Ω—Ö—Ä–æ–Ω–∫–∞ –¥–ª—è –ø–æ–∑–¥–Ω–∏—Ö –ª–æ–≥–æ–≤

from config import TOKEN

# —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞
from aiogram.utils.deep_linking import get_start_link, decode_payload
from aiogram import types

# —Å—á–µ—Ç—á–∏–∫
from collections import Counter

from config import TOKEN, CHANNEL_OUTPUT

from aiogram.dispatcher import FSMContext # –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

storage = MemoryStorage()
   
# from checkGPT import CHECKGPT
import json

# –¥–∞—Ç–∞
from datetime import datetime
# —Ñ–∏–ª—å—Ç—Ä—ã
from aiogram.dispatcher import filters
# –ß–ï–ö
from GPTchecker import *

# –ü–∏—à—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –≥–¥–µ –º–æ–∏ –æ—à–∏–±–∫–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage = MemoryStorage())

CHANNEL_ID = '-1001772153224' # –∞–π–¥–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –≤—Å–µ—Ö –ª–æ–≥–æ–≤ –°–ú–ï–ù–ò–¢–¨ –ö–ê–ù–ê–õ!

#base = sqlite3.connect('data.db') # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
#cur = conn.cursor('') # cur –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–¥
#cur.execute('CREATE TABLE users(user_id INTEGER, username TEXT)') # –¥–æ–±–∞–≤–∏–ª —Å—Ç—Ä–æ–∫—É
def sql_start():
    global base, cur
    base = sqlite3.connect('data.db')
    cur = base.cursor()
    if base:
        print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')
    else:
        print('–ë–∞–∑—ã –Ω–µ—Ç—É')
    base.execute('CREATE TABLE IF NOT EXISTS data(wallets, accs, notes, balance, transactions, adder, date, RowNumber)')
    base.commit()
    base.execute('CREATE TABLE IF NOT EXISTS users(user_id, count_rows_page)')
    base.commit()
sql_start() # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ë–î



# –¥–æ–±–∞–≤–ª—è—é —é–∑–µ—Ä–∞ –≤ –±–¥ –ø—Ä–∏ /start –ù–û –¢–£–¢ –ü–†–û–°–¢–û –ü–†–ò–í–ï–¢–°–¢–í–ò–ï
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply('{user}'.format(user=message.from_user.full_name) + ", welcome!", reply_markup = nav.replykb)
    cur.execute('INSERT INTO "users" (user_id, count_rows_page) VALUES ("{message.from_user.id}", "0")') # –¥–æ–±–∞–≤–ª—è—é —é–∑–µ—Ä–∞ –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    base.commit()


# –í—ã–≤–æ–∂—É —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ ‚úÖ
@dp.message_handler(content_types=['text'], text='üíº–°–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤', state="*") # state='*' –≤ —Ö—ç–Ω–¥–ª–µ—Ä –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –ù–ï –í–û–†–ö
async def buy(message: types.Message):
    if (message.from_user.id == 1277630121 or message.from_user.id == 5980476622): # –í–´ –í –ë–ï–õ–û–ú –°–ü–ò–°–ö–ï?
        print(message.from_user.id)
        cur.execute('SELECT * FROM data')
        data = cur.fetchall()
        await bot.send_message(message.from_user.id, 'üíº–°–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤:', reply_markup=nav.genmarkup(data))
        base.commit()
    else:
        await bot.send_message(message.from_user.id, '–í—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ')
        

# –ü–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤–ø—Ä–∞–≤–æ  ‚úÖ
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'NEXT_LIST')
async def process_callback_NEXT_LIST(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    if callback_query.data == 'NEXT_LIST':
        cur.execute('SELECT count_rows_page FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # 1 —Å—Ç—É–ø–µ–Ω—å - –∏–∑–≤–ª–µ–∫–∞—é –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        count_rows, = cur.fetchone()
        print(count_rows) # —á–∏—Å–ª–æ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫, —Å–∫–æ–±–æ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö
        count_rows = count_rows + 10 # –ø—Ä–∏–±–∞–≤–ª—è—é 10 —á—Ç–æ–±—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —é–∑–µ—Ä–∞
        base.commit()
        cur.execute('UPDATE users SET count_rows_page = ? WHERE user_id LIKE ?', (count_rows, callback_query.from_user.id)) # –æ–±–Ω–æ–≤–ª—è—é –∑–∞–ø–∏—Å—å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        base.commit()
        cur.execute('SELECT * FROM data LIMIT 10 OFFSET ?', (count_rows, )) # –∏–≥–Ω–æ—Ä–∏—Ä—É—é - OFFSET –ø–µ—Ä–≤—ã–µ 10 –∏ —Å—á–∏—Ç—ã–≤–∞—é - LIMIT —Å–ª–µ–¥—É—é—â–∏–µ 10 —Å—Ç—Ä–æ–∫
        data10 = cur.fetchall()
        await bot.send_message(callback_query.from_user.id, 'üíº–°–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤:', reply_markup=nav.genmarkup(data10))
        base.commit()

# –ü–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥  ‚úÖ
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'BACK_LIST')
async def process_callback_BACK_LIST(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    if callback_query.data == 'BACK_LIST':
        cur.execute('SELECT count_rows_page FROM "users" WHERE user_id LIKE ?', (callback_query.from_user.id,)) # 1 —Å—Ç—É–ø–µ–Ω—å - –∏–∑–≤–ª–µ–∫–∞—é –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        count_rows, = cur.fetchone()
        print(count_rows) # —á–∏—Å–ª–æ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫, —Å–∫–æ–±–æ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö
        count_rows = count_rows - 10 # –æ—Ç–Ω–∏–º–∞—é 10 —á—Ç–æ–±—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —é–∑–µ—Ä–∞
        if count_rows < 0:
            count_rows = 0
        print(count_rows)
        base.commit()
        cur.execute('UPDATE users SET count_rows_page = ? WHERE user_id LIKE ?', (count_rows, callback_query.from_user.id)) # –æ–±–Ω–æ–≤–ª—è—é –∑–∞–ø–∏—Å—å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        base.commit()
        cur.execute('SELECT * FROM data LIMIT 10 OFFSET ?', (count_rows, )) # –∏–≥–Ω–æ—Ä–∏—Ä—É—é - OFFSET –ø–µ—Ä–≤—ã–µ 10 –∏ —Å—á–∏—Ç—ã–≤–∞—é - LIMIT —Å–ª–µ–¥—É—é—â–∏–µ 10 —Å—Ç—Ä–æ–∫
    data10 = cur.fetchall()
    await bot.send_message(callback_query.from_user.id, 'üíº–°–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤:', reply_markup=nav.genmarkup(data10))
    base.commit()
    
# –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ‚úÖ
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'FIRST_LIST')
async def process_callback_FIRST_LIST(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í–µ—Ä–Ω—É–ª—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É')
    count_rows = 0
    print(count_rows)
    cur.execute('UPDATE users SET count_rows_page = ? WHERE user_id LIKE ?', (count_rows, callback_query.from_user.id)) # –æ–±–Ω–æ–≤–ª—è—é –∑–∞–ø–∏—Å—å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    base.commit()
    cur.execute('SELECT * FROM data LIMIT 10 OFFSET ?', (count_rows, )) # –∏–≥–Ω–æ—Ä–∏—Ä—É—é - OFFSET –ø–µ—Ä–≤—ã–µ 10 –∏ —Å—á–∏—Ç—ã–≤–∞—é - LIMIT —Å–ª–µ–¥—É—é—â–∏–µ 10 —Å—Ç—Ä–æ–∫
    data1 = cur.fetchall()
    await bot.send_message(callback_query.from_user.id, 'üíº–°–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤:', reply_markup=nav.genmarkup(data1))
    base.commit()

# FSM !!!
class FSMGO(StatesGroup):
    wallet = State()
    accs = State()
    notes = State()
# –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands=['new'])
async def cmd_new(message: types.Message) -> None:
    await message.reply("–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞:\nüí≥–í–≤–µ–¥–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫")
    await FSMGO.wallet.set() # —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞????


@dp.message_handler(state=FSMGO.wallet)
async def load_wallet(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['wallet'] = message.text
    await message.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞üîó')
    await FSMGO.next()

@dp.message_handler(state=FSMGO.accs)
async def load_accs(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['acc'] = message.text
    await message.reply('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µüîó\n–ù–µ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º, –≤–¥—Ä—É–≥ –ø–æ—Ç–æ–º –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è!')
    await FSMGO.next()

@dp.message_handler(state=FSMGO.notes)
async def check_notes(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['notes'] = message.text
        await message.reply(f"{data['wallet']}\n{data['acc']}\n{data['notes']}")
    await message.reply('–ö–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—Éüìå')
    await state.finish()


    # –ø–æ–ª—É—á–∞—é –∫–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫
    cur.execute('SELECT COUNT(*) FROM data') # –ø–æ–ª—É—á–∞—é –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
    Rows_count = cur.fetchone()
    Row_Number = Rows_count[0] + 1 # –ø–æ–ª—É—á–∞—é –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä—Ç–µ–∂–∞ –∏ —Å–∫–ª–∞–¥—ã–≤–∞—é –µ–≥–æ —Å 1, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–π —Å–µ–π—á–∞ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–π —Å—Ç—Ä–æ–∫–∏
    base.commit()


    base.execute("INSERT INTO data (wallets, accs, notes, adder, date) VALUES (?, ?, ?, ?, ?)", (data['wallet'], data['acc'], data['notes'], message.from_user.full_name, datetime.now()))
    base.commit()


# –§–ò–õ–¨–¢–† –ù–ê –ö–ê–õ–ë–≠–ö –•–ê–•–ê–•–ê
@dp.callback_query_handler(filters.Text(equals='DELETE_WALLET')) 
async def process_callback_DELETE_WALLET(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id) # —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ –ø–µ—Ä–µ–ª–∏–≤–∞–ª–∞—Å—å, —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–æ–ª–ª–±—ç–∫
    await bot.send_message(callback_query.from_user.id, f'–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ "—É–¥–∞–ª–∏—Ç—å" –±–µ–∑ –∫–∞–≤—ã—á–µ–∫\n'
        f'–ò –∫–æ—à–µ–ª–µ–∫ –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞\n–ü—Ä–∏–º–µ—Ä: —É–¥–∞–ª–∏—Ç—åbc123343567ygergg'
    f'\n–í–ù–ò–ú–ê–ù–ò–ï! –ï—Å–ª–∏ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ—à–µ–ª–µ–∫, —Ç–æ —É–¥–∞–ª–∏—Ç—Å—è –æ–Ω!\nüö¨üóø') # —Ç–µ–ø–µ—Ä—å —è –ø–µ—Ä–µ–¥–∞—é –≤ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∏–∂–µ
    await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    
# # –£–î–ê–õ–ï–ù–ò–ï –ò–ó –ë–ê–ó–´ –ü–û–°–õ–ï –§–ò–õ–¨–¢–†–ê
@dp.message_handler(filters.Text(contains='—É–¥–∞–ª–∏—Ç—å'))
async def bot_message(message: types.Message):
    #global confirmation
    confirmation = message.text
    confirmation = confirmation.replace('—É–¥–∞–ª–∏—Ç—å', '')
    cur.execute('DELETE FROM data WHERE wallets = (?)', (confirmation, )) # —É–¥–∞–ª—è—é –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–æ—à–µ–ª—å–∫–æ–º
    await message.reply(text='–£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ')




# –î–æ–±–∞–≤–ª—è—é –∫–æ—à–µ–ª–µ–∫
@dp.message_handler(filters.Text(equals='üìå–î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫')) #content_types=['text'], text='üìå–î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫', 
async def add_wallet(message: types.Message):
    if (message.from_user.id == 1277630121 or message.from_user.id == 5980476622):
        await cmd_new(message)
    else:
        await bot.send_message(message.from_user.id, '–í—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ')

# –°—Ç–∞–≤–ª—é –∫–æ—à–µ–ª–µ–∫ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
@dp.message_handler(filters.Text(equals='üí∞–ù–∞—á–∞—Ç—å —á–µ–∫ –∫–æ—à–µ–ª—å–∫–∞'))
async def check_wallet(message: types.Message):
    if (message.from_user.id == 1277630121 or message.from_user.id == 5980476622):
        await bot.send_message(message.from_user.id, '–ö–æ—à–µ–ª–µ–∫ –±—É–¥–µ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n'
            f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥.\n'
            f'–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ–º—ã–π –∫–æ—à–µ–ª–µ–∫ —Å–æ —Å–ª–æ–≤–æ–º –≤ –Ω–∞—á–∞–ª–µ: —á–µ–∫\n'
            f'–ü—Ä–∏–º–µ—Ä: —á–µ–∫bc1qvhxafz8dqk8c25jsx669yd6qrxhl5dx72dyryp')
    else:
        await bot.send_message(message.from_user.id, '–í—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ')

# –†–ï–ê–õ–¨–ù–û –°–¢–ê–í–õ–Æ –ù–ê –ü–†–û–í–ï–†–ö–£
@dp.message_handler(filters.Text(contains='—á–µ–∫'))
async def bot_message(message: types.Message):
    confirmation_check = message.text
    confirmation_check = confirmation_check.replace('—á–µ–∫', '')
    await message.reply(text='–ö–æ—à–µ–ª–µ–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —á–µ–∫. –Ø —Å–æ–æ–±—â—É, –µ—Å–ª–∏ –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ‚ôªÔ∏è')
    await check_new_transaction(confirmation_check)
    if NEW_TRANSACTION == 'üí∏–ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!üí∏':
        await bot.send_message(message.from_user.id, 'üí∏–ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!üí∏')
    
# # –û–°–¢–ê–ù–û–í–ò–¢–¨ –ß–ï–ö–ï–† –§–£–õ–õ
# @dp.message_handler(filters.Text(contains='–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å'))
# async def bot_message(message: types.Message):


# —Ç—É—Ç —á–∏—Å—Ç–æ –∏–Ω—Ñ—É –≤—ã–Ω–∏–º–∞—é –∏–∑ –±–¥ –¥–ª—è —Ü–∏–∫–ª–∞ –∫–Ω–æ–ø–æ–∫ –≤ keyboards.py
@dp.callback_query_handler(lambda call: True)
async def stoptopupcall(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id) # –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ –æ–∂–∏–¥–∞–ª–∞
    cur.execute('SELECT * FROM data') #–ø–æ–ª—É—á–∞–µ–º –Ω–∞—à–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    sqldata = cur.fetchall() # –≤ —Å–ø–∏—Å–æ–∫ –∏—Ö
    sortdata = [] # —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    for i in sqldata: # —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        sortdata.append(i[0]) # –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ tgid –≤ —Å–ø–∏—Å–æ–∫
    if callback_query.data in sortdata: # –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å—Ç—å –ª–∏ –Ω–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ —Ç–µ—Ö –∫–Ω–æ–ø–∫–∞—Ö
        cur.execute('SELECT * FROM data WHERE wallets = (?)', (callback_query.data, )) # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—à–µ–º —é–∑–µ—Ä–µ –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –æ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ callbackk_query.data
        userinfo = cur.fetchall() # –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º.
        await bot.send_message(callback_query.from_user.id, f'<b>–ö–æ—à–µ–ª–µ–∫:</b> <code>{userinfo[0][0]}</code>'
                               f'\n<b>–ê–∫–∫–∞—É–Ω—Ç:</b> <code>{userinfo[0][1]}</code>'
                               f'\n<b>–ó–∞–º–µ—Ç–∫–∏(–ø–ª–æ—â–∞–¥–∫–∞ –∏ –ø—Ä–æ—á–µ–µ):</b> <code>{userinfo[0][2]}</code>'
                               f'\n<b>–ë–∞–ª–∞–Ω—Å:</b> <code>{userinfo[0][3]}</code>'
                               f'\n<b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> <code>{userinfo[0][4]}</code>'
                               f'\n<b>–î–æ–±–∞–≤–∏–ª:</b> <code>{userinfo[0][5]}</code>'
                               f'\n<b>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É:</b> <code>{userinfo[0][6]}</code>', parse_mode='HTML') # –¥–µ–ª–∞–µ–º –≤—ã–≤–æ–¥ –∏–Ω—Ñ—ã
        await bot.send_message(callback_query.from_user.id, '–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫?', reply_markup=nav.delete_wallet())
        await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)


#  –ø–æ–ª–ª–∏–Ω–≥ = –æ–ø—Ä–∞—à–∏–≤–∞—é —Å–µ—Ä–≤–µ—Ä–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö?
if __name__ == '__main__':
    executor.start_polling(dp)
        